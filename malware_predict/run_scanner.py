import pandas as pd
import pickle
import json
import os
import sys

def scan(features_file):
    """
    Scans the provided features file for malware classification using a Random Forest model.

    Args:
        features_file (str): Path to the extracted features CSV file.

    Returns:
        list: A list of classification results with predictions and probabilities.
    """
    try:
        # Get the directory of the current script
        script_dir = os.path.dirname(os.path.abspath(__file__))

        # Load the Random Forest model
        model_path = os.path.join(script_dir, 'model/random_forest_model.pkl')
        with open(model_path, 'rb') as file:
            random_forest_model = pickle.load(file)

        # Load the selected features
        selected_features_path = os.path.join(script_dir, 'model/selected_features.pkl')
        if not os.path.exists(selected_features_path):
            raise FileNotFoundError(f"'{selected_features_path}' file not found.")
        with open(selected_features_path, 'rb') as file:
            selected_features = pickle.load(file)

        # Load the features data
        if not os.path.exists(features_file):
            raise FileNotFoundError(f"Features file '{features_file}' not found.")
        features_data = pd.read_csv(features_file)

        # Check for missing features
        missing_features = set(selected_features) - set(features_data.columns)
        if missing_features:
            print(f"Warning: Missing features in the scanned sample: {missing_features}")

        # Process data for prediction
        processed_data = features_data.reindex(columns=selected_features).fillna(0)
        if processed_data.empty:
            print("No valid data available for scanning.")
            return []

        # Perform classification
        predictions = random_forest_model.predict(processed_data)
        probabilities = random_forest_model.predict_proba(processed_data)

        # Compile results
        results = []
        for i, row in features_data.iterrows():
            results.append({
                "Name": row['Name'],
                "md5": row['md5'],
                "Prediction": "Malicious" if predictions[i] == 0 else "Benign",
                "Probability": max(probabilities[i])
            })

        return results

    except Exception as e:
        print(f"An error occurred during scanning: {e}")
        return []


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 run_scanner.py <features_file>")
        sys.exit(1)

    features_file = sys.argv[1]
    results = scan(features_file)

    if results:
        # Use the absolute path for saving results
        script_dir = os.path.dirname(os.path.abspath(__file__))
        output_file = os.path.join(script_dir, "scanning_results.json")
        with open(output_file, "w") as f:
            json.dump(results, f, indent=4)
        print(f"Scanning completed. Results saved to {output_file}.")
    else:
        print("Scanning completed. No valid results to save.")
