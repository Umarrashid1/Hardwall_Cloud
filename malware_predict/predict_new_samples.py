# predict_new_samples.py

import pandas as pd
import pickle
import os



def scan(extracted_features_data=None):
    with open('model/random_forest_model.pkl', 'rb') as file:
        random_forest_model = pickle.load(file)

    # Check if selected features file exists & load it
    selected_features_path = '/model/selected_features.pkl'
    print(f"Loading selected features from {selected_features_path}")
    if not os.path.exists(selected_features_path):
        print(f"Error: '{selected_features_path}' file not found.")
        exit(1) 

    with open(selected_features_path, 'rb') as file:
        selected_features = pickle.load(file)
    # print(f"Loaded selected features: {selected_features.tolist()}")


    extracted_features_file = 'model/extracted_features.csv'
    if not os.path.exists(extracted_features_file):
        print(f"Error: '{extracted_features_file}' file not found.")
        exit(1)

    # Use provided extracted features data if available; otherwise, load from the default CSV file
    if extracted_features_data is None:
        default_features_file = 'extracted_features.csv'
        if not os.path.exists(default_features_file):
            print(f"Error: '{default_features_file}' file not found.")
            return
        scanned_data = pd.read_csv(default_features_file)
    else:
        scanned_data = extracted_features_data

    # Check for missing features in scanned data
    missing_features = set(selected_features) - set(scanned_data.columns)
    missing_features_list = []
    if missing_features:
        print(f"Missing features in the scanned sample: {missing_features}")
        missing_features_list = list(missing_features)

    # Filter the extracted_features_data to only contain the columns expected by the model

    #extracted_features_data_filtered = extracted_features_data.reindex(columns=selected_features).fillna(0)
    processed_data = scanned_data.reindex(columns=selected_features).fillna(0)


    if not processed_data.empty:
        classification_results = random_forest_model.predict(processed_data)

        probabilities = random_forest_model.predict_proba(processed_data)

        # Map classification_results to labels
        prediction_labels = ['Malicious' if pred == 0 else 'Benign' for pred in classification_results]

        # Extract probabilities
        prediction_certainty = [max(prob) for prob in probabilities]

        # Output results
        prediction_results  = pd.DataFrame({
            'Name': scanned_data['Name'],
            'md5': scanned_data['md5'],
            'Prediction': prediction_labels,
            'Probability': prediction_certainty
        })
        print(prediction_results )
    else:
        print("No valid data available for prediction.")

    return prediction_results , missing_features_list

if __name__ == "__main__":
    scan()