
import pandas as pd
import pefile
import hashlib
import os
import sys  # Import sys to access command-line arguments
import feature_extraction
import run_scanner as predict_new_samples

from werkzeug.utils import secure_filename
import tempfile
from flask import Flask, request, jsonify
#PORT = 5000
PORT = int(os.environ.get('PORT', 5000))
app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 16 MB limit

@app.route('/malpredict', methods=['POST'])
def predict_files():
    final_findings = []
    request_files = request.files.getlist('file')
    
    
    for file in request_files:
        print(file)
        print(file.filename)
        file.filename = secure_filename(file.filename)
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            file.save(temp_file.name)
            features = feature_extraction.extract_features(temp_file.name)
            os.remove(temp_file.name)
        if features is not None:
            data = []
            data.append(features)
            df = pd.DataFrame(data)
        
        result, missing_features = predict_new_samples.scan(df)
        
        collected_results = {
            'file_name': file.filename,
            'results': result.to_dict(orient='records'),
            'missing_features': missing_features
        }
        final_findings.append(collected_results)
    if final_findings:
            return jsonify(final_findings)
    else:
        return jsonify({'message': 'Error extracting features from file'}), 400
   



@app.route('/', methods=['POST'])
def extract_test():
    print("Extracting features from file")
    print('\n\n')
    print(request.files)
    if 'file' not in request.files:
        return jsonify({'message': 'No file part in the request'}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({'message': 'No file selected for uploading'}), 400

    if file:
        file.filename = secure_filename(file.filename)
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            file.save(temp_file.name)
            features = feature_extraction.extract_features(temp_file.name)
            os.remove(temp_file.name)
        if features is not None:
            data = []
            data.append(features)
            
            #output_file = 'extracted_features.csv'
            df = pd.DataFrame(data)
            #df.to_csv(output_file, index=False)
            
            results, missing_features = predict_new_samples.scan(df)
            if results is not None:
                return jsonify(results.to_dict(orient='records'), missing_features)
        else:
            return jsonify({'message': 'Error extracting features from file'}), 400
    return jsonify({'message': 'shit received'})

